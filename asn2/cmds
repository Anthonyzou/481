#!/usr/bin/env bash
set -o xtrace

mpich (){
  pushd mpich-3.2
    ./mpich-3.2/configure --disable-fortran --prefix=$(pwd)/build
  popd
}

boost (){
  PATH=$(pwd)/mpich-3.2/build/bin:$PATH
  LD_LIBRARY_PATH=$(pwd)/mpich-3.2/build/lib:$LD_LIBRARY_PATH
  pushd boost_1_60_0
    ./bootstrap.sh
    git checkout project-config.jam
    ./b2 --with-mpi --with-serialization -j 8
    ./b2 install --prefix=${pwd}/build -j 8
  popd
}

# test run
run (){
  ./release/sequential -size 10000
  mpirun -npernode 4 release/asn2 -size 10000
}

# build hostfile
hostfile (){
  nodejs scaleway.js > hostfile
}

upload(){
  while IFS='' read -r line || [[ -n "$line" ]]; do
    rsync -a --delete ~/481/ ${line}:481/
  done < hostfile
}

build(){
  rm -rf release build
  cmake -DCMAKE_BUILD_TYPE=Release -B./build -H.
  make -C build -j 4
}

# make binarys
release (){
  build
  hostfile
  run
  upload
}

# test benchmark
benchmark_test(){
  ./benchmark.sh 8000 1000 12000
}

# full benchmark
benchmark(){
  ./benchmark.sh 24000000 1000000 28000000
}

maketar(){
  tar -czvf asn2.tar.gz --exclude='build' --exclude='release' --exclude='.[^/]*'  --exclude='*.tar.gz' .
}

graphs(){
  rm stats/*.png
  python release/graph.py
}

# Show a list of functions
help () {
    echo "functions available:"
    typeset -f | awk '/ \(\) $/ && !/^main / {print $1}'
}

if [ "_$1" = "_" ]; then
    help
else
    "$@"
fi
